# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
SWARM_MODE=1
EXIST_OPENBATON=1

CLUSTER_NUMBERS=2
CONTROL_NUMBERS=1
CLIENT_NUMBERS=1
TEST_TITLE="multiswarm"

OPENBATON_CPU="3"
OPENBATON_RAM="3072"
CONTROL_CPU="1"
CONTROL_RAM="1024"
CLIENT_CPU="1"
CLIENT_RAM="1024"
 
Vagrant.configure("2") do |config|
    config.vm.box = "ubuntu/xenial64"

    if EXIST_OPENBATON == 1
        config.vm.define "openbaton-control" do |ob|
            ob.vm.hostname = "openbaton-control"
            ob.vm.synced_folder "../../multi-swarm-networking", "/opt/ms_net"
            (1..CLUSTER_NUMBERS).each do |k|
                ob.vm.network "private_network", ip: "192.168.11#{k}.100"
            end
            ob.vm.provider "virtualbox" do |v|
                v.name = "openbaton-control"
                v.cpus = OPENBATON_CPU
                v.memory = OPENBATON_RAM
            end
            ob.vm.provision :shell, path: "init_openbaton.sh"
            ob.vm.network "forwarded_port", guest: 5672, host: 5672
            ob.vm.network "forwarded_port", guest: 15672, host: 15672
        end
    end

    (1..CLUSTER_NUMBERS).each do |k|
        (1..CONTROL_NUMBERS).each do |i|
            config.vm.define "#{TEST_TITLE}-control#{k}-#{i}" do |ctrl|
                control_ipaddr="192.168.11#{k}.10#{i}"

                ctrl.vm.hostname = "#{TEST_TITLE}-control#{k}-#{i}"
                ctrl.vm.network "private_network", ip: control_ipaddr
#                ctrl.vm.network "forwarded_port", guest: 80, host: 8080
                ctrl.vm.provider "virtualbox" do |v|
                    v.name = "#{TEST_TITLE}-control#{k}-#{i}"
                    v.cpus = CONTROL_CPU
                    v.memory = CONTROL_RAM
                end

                ctrl.vm.provision :shell, path: "init_docker.sh"
                if SWARM_MODE == 1
                    if i == 1
                        ctrl.vm.provision :shell, inline: "docker swarm init --advertise-addr=192.168.11#{k}.10#{i}"
                        ctrl.vm.provision :shell, inline: "docker swarm join-token manager | grep docker > /vagrant/join#{k}.mng"
                        ctrl.vm.provision :shell, inline: "docker swarm join-token worker | grep docker > /vagrant/join#{k}.wkr"
                    else
                        ctrl.vm.provision :shell, inline: "bash /vagrant/join#{k}.mng"
                    end
                    if i == CONTROL_NUMBERS
                        ctrl.vm.provision :shell, inline: "rm /vagrant/join#{k}.mng"
                    end
                end

                ctrl.vm.provision :shell, :path => "init_docker_control.sh", :args => control_ipaddr
            end
        end

        (1..CLIENT_NUMBERS).each do |j|
            config.vm.define "#{TEST_TITLE}-client#{k}-#{j}" do |cli|
                client_ip_suffix = CONTROL_NUMBERS + j
                client_ipaddr = "192.168.11#{k}.10#{client_ip_suffix}"

                cli.vm.hostname = "#{TEST_TITLE}-client#{k}-#{j}"
                cli.vm.network "private_network", ip: client_ipaddr
                cli.vm.provider "virtualbox" do |v|
                    v.name = "#{TEST_TITLE}-client#{k}-#{j}"
                    v.cpus = CLIENT_CPU
                    v.memory = CLIENT_RAM
                end
                cli.vm.provision :shell, path: "init_docker.sh"

                if SWARM_MODE == 1
                    cli.vm.provision :shell, inline: "bash /vagrant/join#{k}.wkr"
                    if j == CLIENT_NUMBERS
                        cli.vm.provision :shell, inline: "rm /vagrant/join#{k}.wkr"
                    end
                end
            end
        end
    end
end

